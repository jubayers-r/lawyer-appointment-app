[
  {
    "id": 1,
    "image": "https://i.ibb.co.com/S7tKDTZ0/use-State-hook-twitter.png",
    "title": "What is useState and how does it work in React?",
    "time_posted": "2025-04-22T10:00:00Z",
    "read_min": 4,
    "author_name": "Jubayer Shikder",
    "author_image": "https://i.ibb.co.com/RTQHKfp3/download.png",
    "answer": "useState is a React Hook that lets us add a state variable to our component. In React, the useState Hook allows us to add state to functional components. useState returns an array with two values: the current state and a function to update it."
  },
  {
    "id": 2,
    "image": "https://i.ibb.co.com/Swhrcyvr/download.jpg",
    "title": "What is the purpose of useEffect in React?",
    "time_posted": "2025-04-22T10:30:00Z",
    "read_min": 5,
    "author_name": "Jubayer Shikder",
    "author_image": "https://i.ibb.co.com/RTQHKfp3/download.png",
    "answer": "The useEffect Hook allows us to perform common side effects in function components. These side effects are tasks outside the component scope, such as fetching data, interacting with the DOM, or managing subscriptions. The useEffect Hook takes two arguments: a callback function that contains the side effect logic and an optional array of dependencies that controls when the effect runs."
  },
  {
    "id": 3,
    "image": "https://i.ibb.co.com/jvt10ZD6/Implementing-React-Custom-Hooks-A-Complete-Guide.png",
    "title": "What is a custom hook in React and when should you use one?",
    "time_posted": "2025-04-22T11:00:00Z",
    "read_min": 4,
    "author_name": "Jubayer Shikder",
    "author_image": "https://i.ibb.co.com/RTQHKfp3/download.png",
    "answer": "A custom hook in React is a way to make reusable hooks using React's built-in hooks like useState, useEffect, etc. It can be created for specific needs without modifying React itself. You should use a custom hook when you're repeating the same logic across components. Creating and reusing a custom hook keeps the code cleaner and more maintainable."
  },
  {
    "id": 4,
    "image": "https://i.ibb.co.com/3m8jYqGV/Control-Uncontrolled-Components-Nasscom.png",
    "title": "Difference between controlled and uncontrolled components. Which one is better?",
    "time_posted": "2025-04-22T11:30:00Z",
    "read_min": 6,
    "author_name": "Jubayer Shikder",
    "author_image": "https://i.ibb.co.com/RTQHKfp3/download.png",
    "answer": "Controlled components are managed by React state, providing more control and synchronization, while uncontrolled components delegate control to the DOM, offering flexibility and performance benefits in certain scenarios. Controlled components are generally recommended for most React applications because they offer better control, easier debugging, and improved maintainabilityâ€”especially for complex forms."
  },
  {
    "id": 5,
    "image": "https://i.ibb.co.com/cSqNTKGg/1-csn-UIq-WFx-UQ9-f-CDCEBd-AQ.png",
    "title": "Tell us something about useFormStatus() in React.",
    "time_posted": "2025-04-22T12:00:00Z",
    "read_min": 3,
    "author_name": "Jubayer Shikder",
    "author_image": "https://i.ibb.co.com/RTQHKfp3/download.png",
    "answer": "useFormStatus is a Hook that gives us status information about the last form submission. It does not take any parameters but returns important data such as whether a submission is pending. This is useful for showing loading indicators or disabling buttons during form submission using the pending property."
  }
]
